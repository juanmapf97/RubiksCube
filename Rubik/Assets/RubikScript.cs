using UnityEngine;using System.Collections;//Class to control rubik's cube rotationpublic class RubikScript : MonoBehaviour {	//Public Variables	public GameObject rubix;    public int rotationSpeed;	//Private Variables	private GameObject[] cubes;    private GameObject pivot;	private int i;    // Use this for initialisation    void Start () 	{        pivot = new GameObject("pivot");
        //All cubes tagged as Cube
        cubes = GameObject.FindGameObjectsWithTag("Cube");	}	//Rotate the right face	void RotateRight()    {         pivot.transform.position = new Vector3(-12.64479f, -7.834972f, 2.402084f);        //Find right face cubes and set rightPivot as their parent        foreach (GameObject cube in cubes)		{			if(cube.transform.position.z > 3)			{				cube.transform.parent = pivot.transform;			}		}        pivot.transform.RotateAround(new Vector3(-12.64479f, -8.834972f, 3.402084f), Vector3.forward, rotationSpeed * Time.deltaTime);    }    void RotateLeft()    {        pivot.transform.position = new Vector3(-12.64479f, -7.834972f, 2.402084f);        //Find right face cubes and set rightPivot as their parent        foreach (GameObject cube in cubes)        {            if (cube.transform.position.y > -7.9f && cube.transform.position.y < -7.0f)            {                cube.transform.parent = pivot.transform;            }        }
        int count = 0;
        while (count < 90)
        {
            pivot.transform.RotateAround(pivot.transform.position, Vector3.up, rotationSpeed*Time.deltaTime);
            count += rotationSpeed;
        }    }    void RotateFront()    {        pivot.transform.position = new Vector3(-12.64479f, -8.834972f, 3.402084f);        //Find right face cubes and set rightPivot as their parent        foreach (GameObject cube in cubes)        {            if (cube.transform.position.z > 3)            {                cube.transform.parent = pivot.transform;            }        }        pivot.transform.RotateAround(pivot.transform.position, Vector3.back, 90);    }    void RotateBack()    {        pivot.transform.position = new Vector3(-12.64479f, -7.834972f, 2.402084f);        //Find right face cubes and set rightPivot as their parent        foreach (GameObject cube in cubes)        {            if (cube.transform.position.z > 3)            {                cube.transform.parent = pivot.transform;            }        }        pivot.transform.RotateAround(new Vector3(-12.64479f, -8.834972f, 3.402084f), Vector3.forward, rotationSpeed * Time.deltaTime);    }    void RotateUp()    {        pivot.transform.position = new Vector3(-12.64479f, -7.834972f, 2.402084f);        //Find right face cubes and set rightPivot as their parent        foreach (GameObject cube in cubes)        {            if (cube.transform.position.z > 3)            {                cube.transform.parent = pivot.transform;            }        }        pivot.transform.RotateAround(new Vector3(-12.64479f, -8.834972f, 3.402084f), Vector3.forward, rotationSpeed * Time.deltaTime);    }    void RotateDown()    {        pivot.transform.position = new Vector3(-12.64479f, -7.834972f, 2.402084f);        //Find right face cubes and set rightPivot as their parent        foreach (GameObject cube in cubes)        {            if (cube.transform.position.z > 3)            {                cube.transform.parent = pivot.transform;            }        }        pivot.transform.RotateAround(new Vector3(-12.64479f, -8.834972f, 3.402084f), Vector3.forward, rotationSpeed * Time.deltaTime);    }    //Perform rotation gradually (To prove concept)    void Update()	{        if (Input.GetKeyDown("q"))        {            RotateLeft();        }        else if (Input.GetKeyDown("w"))        {        }        else if (Input.GetKeyDown("z"))        {        }        else if (Input.GetKeyDown("x"))        {        }        else if (Input.GetKeyDown("e"))        {        }        else if (Input.GetKeyDown("r"))        {        }        else if (Input.GetKeyDown("c"))        {        }        else if (Input.GetKeyDown("v"))        {        }        else if (Input.GetKeyDown("t"))        {        }        else if (Input.GetKeyDown("b"))        {            RotateFront();        }        else if (Input.GetKeyDown("y"))        {        }        else if (Input.GetKeyDown("n"))        {        }        foreach (var cube in cubes)
        {
            cube.transform.parent = rubix.transform;
        }        //rightPivot.transform.RotateAround(new Vector3(-12.64479f,-8.834972f,3.402084f),Vector3.forward,rotationSpeed*Time.deltaTime);    }}